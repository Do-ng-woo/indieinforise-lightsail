"""
Django settings for Renaissance project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from django.urls import reverse, reverse_lazy
from pathlib import Path
import os
from dotenv import load_dotenv

# .env 파일의 환경 변수 로드
load_dotenv()

from django.contrib.messages import constants as messages


import environ
env = environ.Env(
    DEBUG=(bool,False)
)

AUTH_USER_MODEL = 'accountapp.CustomUser'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(
    env_file = os.path.join(BASE_DIR, '.env')
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

KAKAO_JS_API_KEY = env('KAKAO_JS_API_KEY')

KAKAO_API_KEY =env('KAKAO_API_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'accountapp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4',
    'profileapp',
    'articleapp',
    'commentapp',
    'projectapp',
    'subscribeapp',
    'artistapp',
    'likeapp',
    'django_select2',
    'personapp',
    'homepageapp',
    'communityapp',
    'tinymce',
    'crispy_forms',
    'crispy_bootstrap4',
    'singapp',
    'albumapp',
    'genreapp',
    'searchapp',
    'instrumentapp',
    'myshowapp'
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Renaissance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'accountapp.context_processors.profile_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'Renaissance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # MySQL 엔진 사용
        'NAME': env('DB_NAME'),  # 데이터베이스 이름
        'USER': env('DB_USER'),  # 데이터베이스 사용자 이름
        'PASSWORD': env('DB_PASSWORD'),  # 데이터베이스 비밀번호
        'HOST': env('DB_HOST'),  # 데이터베이스 호스트 (MySQL 서버 주소)
        'PORT': env('DB_PORT', default='3306'),  # 포트 번호 (기본값 3306)
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',  # SQLite 엔진 사용
#         'NAME': BASE_DIR / 'db.sqlite3',  # 데이터베이스 파일 경로
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),
                   os.path.join(BASE_DIR, 'staticfiles/django_select2'),]

LOGIN_REDIRECT_URL = reverse_lazy('home')
LOGOUT_REDIRECT_URL = reverse_lazy('accountapp:login')

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


DATETIME_INPUT_FORMATS = [
    '%Y/%m/%d %H:%M',  # '2024/01/16 18:33' 형식에 맞게 설정
    # 기타 필요한 날짜/시간 형식들을 여기에 추가
]

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/8dl2747v6qljb2t35lcxsf5a0wae2gegwne1xdzplqf6qmnc/tinymce/5/tinymce.min.js'
TINYMCE_DEFAULT_CONFIG = {
    'height': 360,
    'width': 960,
    'selector': '.tinymce',
    # 추가적인 TinyMCE 설정 옵션을 여기에 추가할 수 있습니
}
CRISPY_TEMPLATE_PACK = 'bootstrap4'  # Bootstrap4를 사용하는 경우

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000